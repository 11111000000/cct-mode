* cct-mode — перевод комментариев в коде в оверлеях с помощью GPTel

- Автоматически находит комментарии в текущем буфере и переводит их выбранной LLM через gptel.
- Результат показывается оверлеями поверх исходного текста.
- При наведении курсора перевод скрывается, чтобы редактировать оригинал.
- Повторный перевод после правок выполняется с задержкой (debounce).

- Возможности

- Перевод всех комментариев в буфере одним запросом к модели.
- Перевод комментария под курсором отдельной командой.
- Сохранение исходных разделителей комментариев и переносов строк (просим модель).
- Подсветка ожидающих перевода и переведённых комментариев разными faces.
- В Emacs Lisp дополнительно поддерживаются докстринги функций, макросов, переменных, defcustom/defgroup.
- Безопасное определение комментариев через syntax-ppss (исключает «комментарии» внутри строк).
- Журнал отладки в отдельном буфере с промптами и ответами модели.

- Требования и зависимости

- Emacs с установленным пакетом gptel.
- Настроенная модель и API-ключ для gptel (OpenAI/совместимые или локальные).
- NixOS: установите gptel и пробросьте переменные окружения с API-ключом в Emacs (через home-manager/direnv/systemd user services).

- Установка

- Поместите файл cct-mode.el в load-path.
- В init.el:
  #+begin_src 
(require 'cct-mode)
(cct-mode 1)  ; опционально, чтобы включать режим по-умолчанию
  #+end_src

- Быстрый старт

- Откройте буфер с кодом.
- Запустите команду:
  - M-x cct-translate-buffer
- Наведите курсор на переведённый комментарий, чтобы увидеть и отредактировать оригинал.
- Чтобы перевести только комментарий под курсором:
  - M-x cct-translate-at-point

- Основные команды

- cct-mode
  - Включает/выключает режим. При выключении оверлеи удаляются.
- cct-translate-buffer
  - Собирает все комментарии в буфере и отправляет один batched-запрос к модели.
- cct-translate-at-point
  - Переводит комментарий под курсором отдельным запросом.

- Настройки пользователя (Customize)

- cct-source-language (string, по-умолчанию "English")
  - Язык исходных комментариев.
- cct-target-language (string, по-умолчанию "Russian")
  - Язык перевода.
- cct-edit-debounce (integer, секунды; по-умолчанию 60)
  - Через сколько секунд простоя после правки комментарий отправить на повторный перевод.
- cct-debug (boolean, по-умолчанию t)
  - Логировать промпты и ответы в буфер /cct-debug/ и показывать его в боковом окне.

- Faces

- cct-waiting-face
  - Для комментариев, ожидающих перевода (серый фон).
- cct-translation-face
  - Для переведённых комментариев (более тёмный фон).

- Поведение оверлеев и редактирование

- В обычном состоянии показывается перевод с помощью overlay 'display'.
- При наведении курсора на оверлей:
  - Перевод скрывается, показывается оригинальный текст (overlay 'display' снимается).
  - Можно свободно редактировать оригинальный комментарий.
- После правки комментария:
  - Назначается idle-таймер на cct-edit-debounce секунд.
  - По истечении таймера отправляется запрос на повторный перевод только этого комментария.
- При уходе курсора с оверлея:
  - Перевод снова показывается.

- Как определяется, что является комментарием

- Общий алгоритм (в большинстве major-mode):
  - Используется syntax-ppss и forward-comment: корректно собираются строковые и блочные комментарии.
  - Маркеры комментариев внутри строк игнорируются.
- Для Emacs Lisp дополнительно:
  - Строковые комментарии: объединяются последовательные строки, начинающиеся с «;».
  - Докстринги: извлекаются у defun/defmacro/defvar и у defcustom/defgroup.

- Промпт и формат ответа

- Мод отправляет один объединённый промпт:
  - Просит перевести каждый комментарий из массива от cct-source-language к cct-target-language.
  - Просит сохранить разделители комментариев и переносы строк.
  - Требует вернуть строго JSON-массив вида:
    - [{"id":0,"translation":"…"}, ...]
- В batched-режиме id соответствует порядковому номеру комментария в исходном массиве.
- Ответ парсится из JSON; допустимы ответы в тройных кавычках с пометкой =json (мод удаляет ограждение).

* Отладка

- Буфер *cct-debug*:
  - Логирует исходный промпт и полный ответ модели.
  - Автоматически открывается в боковой панели справа при включённом cct-debug.
- Сообщения о ходе работы и ошибках также дублируются через message.

* Кэширование

- В коде заложена архитектура кэширования по хэшу текста комментария и восстановления при включении режима.
- В текущей версии внешнее сохранение/загрузка кэша ещё не реализованы (TODO в коде).
- Внутренняя таблица комментариев хранит:
  - начало, конец, overlay, hash исходного текста, переведённый текст.

* Производительность и потоковая передача

- По-умолчанию запросы к gptel отправляются со streaming (:stream t), чтобы уменьшить задержку ожидания.
- Перевод всего буфера выполняется одним batched-запросом — это снижает накладные расходы.
- На очень больших буферах формирование и отправка массива комментариев может занять время.

* Ограничения и рекомендации

- Модель должна вернуть валидный JSON без лишнего текста — иначе перевод будет проигнорирован и залогирован.
- При несоответствии количества объектов в массиве или отсутствующих полях "id"/"translation" часть комментариев может остаться без перевода.
- Сохранение «разделителей комментариев» и «переносов строк» — рекомендация к модели; ожидаемая схема, но не железная гарантия.
- В Emacs Lisp докстринги извлекаются эвристически, возможны редкие ложные срабатывания или пропуски.
- Безопасность: комментарии (и докстринги) отправляются в внешнюю LLM (если она облачная). Учитывайте политику конфиденциальности и настройте исключения, если необходимо.
- Совместимость:
  - Работает в режимах с корректно настроенным синтаксисом комментариев.
  - Не учитывает специфические «вторичные» синтаксисы или экзотические диалекты, где комментарии не описаны через стандартную таблицу синтаксиса.

* Типичный рабочий процесс

- Включите режим: M-x cct-mode.
- Переведите весь буфер: M-x cct-translate-buffer.
- Правьте исходные комментарии, наводя курсор для показа оригинала.
- Подождите cct-edit-debounce секунд (по-умолчанию 60) — переводы обновятся автоматически.

* Пример минимальной настройки

- Пример в init.el:
#+begin_src 
(use-package gptel :ensure t)
(load "/path/to/cct-mode.el")
(setq cct-source-language "English"
          cct-target-language "Russian"
          cct-edit-debounce 20
          cct-debug t)
(add-hook 'prog-mode-hook #'cct-mode)
#+end_src  

* Интеграция с gptel

- Используется gptel-request с callback.
- Буфер запроса — текущий буфер; стриминг включён.
- Настройка провайдера и модели выполняется через стандартные переменные gptel:
  - Например, gptel-model, gptel-backend, переменные для ключей API.
- Для NixOS:
  - Рекомендуется задать переменные окружения (например, OPENAI_API_KEY) в user environment, доступном для Emacs.
  - Убедитесь, что gptel имеет доступ к сети и сертификатам (nss-cacert).

* Устранение неполадок

- В ответе «Ошибка разбора JSON»:
  - Проверьте *cct-debug* — модель, возможно, вернула текст до/после JSON или неверный формат ключей.
  - Попробуйте ещё раз или смените модель/temperature/системный промпт gptel.
- Перевод не появляется:
  - Убедитесь, что оверлей существует (переводимые участки подсвечиваются cct-waiting-face до ответа).
  - Проверьте, не скрыт ли перевод из-за того, что курсор стоит внутри оверлея.
- Ничего не нашлось для перевода:
  - Проверьте, что буфер действительно содержит комментарии для данного major-mode.
  - Для Emacs Lisp: строки должны начинаться с «;», докстринги должны быть строковыми литералами на ожидаемых позициях.

* Внутреннее устройство (для разработчиков)

- Сбор диапазонов комментариев:
  - cct--collect-comment-ranges с использованием syntax-ppss/forward-comment и специальных правил для Emacs Lisp.
- Построение промпта:
  - cct--build-global-prompt формирует массив комментариев с индексами id.
- Запрос к LLM:
  - cct--request оборачивает gptel-request, логирует и обрабатывает ответ, включая удаление =json-фенса и парсинг JSON.
- Оверлеи:
  - cct--create-overlay создаёт/обновляет overlay; хранит перевод в свойстве 'cct-translation', показывает через 'display'.
  - Наведение/уход курсора обрабатывается хуком post-command (cct--post-command-hide/show).
- Редактирование и debounce:
  - after-change-functions (cct--after-change) планирует повторный перевод через run-with-idle-timer.
  - cct--retranslate-overlay переотправляет одиночный комментарий.
- Таблица комментариев:
  - cct--comment-table: вектор из (beg end ov hash translation) на один комментарий.

- Статус и планы

- Реализовано: batched-перевод, отложенный повторный перевод, отображение/скрытие переводов, логирование.
- В планах:
  - Персистентный кэш переводов по хэшам в файлы с восстановлением при включении режима.
  - Дополнительные настройки промпта/формата ответа.
  - Пользовательские ключевые привязки.

- Автор и обратная связь

- Автор: Petr 11111000000@email.com
- Предложения и баг-репорты: приложите фрагмент /cct-debug/ и сведения о версии Emacs/gptel/модели.

*** 
